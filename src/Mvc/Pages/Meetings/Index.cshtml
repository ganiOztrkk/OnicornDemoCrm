@{
ViewBag.Title = "Users";
Layout = "_Layout";
}

@section Scripts {
<script src="/AdminLTE/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="/AdminLTE/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
<script src="/AdminLTE/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
<script src="/AdminLTE/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
<script src="/AdminLTE/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
<script src="/AdminLTE/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
<script src="/AdminLTE/plugins/jszip/jszip.min.js"></script>
<script src="/AdminLTE/plugins/pdfmake/pdfmake.min.js"></script>
<script src="/AdminLTE/plugins/pdfmake/vfs_fonts.js"></script>
<script src="/AdminLTE/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
<script src="/AdminLTE/plugins/datatables-buttons/js/buttons.print.min.js"></script>
<script src="/AdminLTE/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<script>
    $(document).ready(function () {
        //dinamik tablo oluşturma
        let table = $('#meetingTable').DataTable({
            ajax: {
                url: '/Meetings/GetAll/',
                dataSrc: function (json) {
                    try {
                        let data = JSON.parse(json.data);
                        return data.length ? data : null;
                    } catch (e) {
                        return null;
                    }
                }
            },
            columns: [
                { data: 'Title' },
                { data: 'Description' },
                {
                    data: 'StartDate',
                    render: function (data) {
                        let date = new Date(data);
                        return date.getFullYear() + '-' +
                            ('0' + (date.getMonth() + 1)).slice(-2) + '-' +
                            ('0' + date.getDate()).slice(-2);
                    }
                },
                { data: 'Duration' },
                {
                    data: null,
                    className: "center",
                    defaultContent: ' <button class="btn btn-sm btn-danger deleteBtn"><i class="fas fa-trash"></i></button>'
                }
            ],
            order: [[0, 'asc']],
            paging: true,
            searching: true,
            info: true,
            lengthMenu: [[20, 50, 100, -1], [20, 50, 100, "Tümü"]],
            language: {
                emptyTable: "Atanan toplantı yok",
                zeroRecords: "Atanan toplantı yok"
            }
        });

        //tablo dinamik tekrar yükle
        function reloadTable() {
            table.ajax.reload();
        }

        function loadEmployees(selectedIds = []) {
            $.ajax({
                url: '/Users/GetAll/',
                type: 'GET',
                success: function (response) {
                    try {
                        let employees = (typeof response.data === 'string') ? JSON.parse(response.data) : response.data;

                        if (response.success) {
                            let EmployeesCheckboxContainer = $('#EmployeesCheckboxContainer');
                            EmployeesCheckboxContainer.empty();

                            $.each(employees, function (index, user) {
                                let checkbox = `<div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="${user.Id}" id="checkbox_${user.Id}" name="UserIds">
                                                    <label class="form-check-label" for="checkbox_${user.Id}">
                                                        ${user.Name} ${user.Lastname}
                                                    </label>
                                                </div>`;
                                EmployeesCheckboxContainer.append(checkbox);
                            });

                            if (selectedIds.length > 0) {
                                selectedIds.forEach(id => {
                                    $(`#checkbox_${id}`).prop('checked', true);
                                });
                            }
                        } else {
                            toastr.error(response.message);
                        }
                    } catch (error) {
                        console.error('Response Parsing Error:', error);
                        toastr.error('Elemanlar yüklenirken bir hata oluştu');
                    }
                },
                error: function () {
                    toastr.error('Elemanlar yüklenirken bir hata oluştu');
                }
            });
        }

        //modal - toplantı kaydet işlemi
        $('#saveMeetingBtn').on('click', function () {
            let formData = $('#meetingForm').serializeArray();
            
            $.ajax({
                url: '/Meetings/Create/',
                type: 'POST',
                data: $.param(formData),
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $('#meetingModal').modal('hide');
                        reloadTable();
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function () {
                    toastr.error('Beklenmedik bir hata oluştu');
                }
            });
        });

        //toplantı delete işlemi
        $('#meetingTable tbody').on('click', '.deleteBtn', function () {
            let meetingId = table.row($(this).parents('tr')).data().Id;
            $.ajax({
                url: '/Meetings/Delete/',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ id: meetingId }),
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        reloadTable();
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function () {
                    toastr.error('Beklenmedik bir hata oluştu');
                }
            });
        });

        //modal- create ekranı açma
        $('#addMeetingBtn').on('click', function () {
            $('#meetingForm')[0].reset();
            $('#saveMeetingBtn').show();
            $('#meetingModalLabel').text("Görev Ekle");
            $('#meetingModal').modal('show');
            loadEmployees();
        });

        //modal kapama
        $('#closeCreateModal').on('click', function () {
            $('#meetingForm')[0].reset();
            $('#meetingModal').modal('hide');
        });
    });
</script>
}

<div class="card-header d-flex justify-content-between">
    <h3 class="card-title">Toplantı Listesi</h3>
    <button class="btn btn-primary" id="addMeetingBtn"><i class="fas fa-plus"></i> Toplantı Oluştur</button>
</div>
<div class="card-body">
    <table id="meetingTable" class="table table-striped table-bordered text-center">
        <thead>
        <tr>
            <th>Toplantı Konu</th>
            <th>Toplantı Açıklama</th>
            <th>Toplantı Tarihi</th>
            <th>Toplantı Süresi</th>
            <th>İşlem</th>
        </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
<!-- toplantı Ekleme Modalı -->
<div class="modal fade" id="meetingModal" tabindex="-1" role="dialog" aria-labelledby="meetingModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="meetingModalLabel">Görev Ekle</h5>
                <button id="closeCreateModal" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="meetingForm">
                    <input type="hidden" class="form-control" id="Id" name="Id">
                    <div class="form-group">
                        <label for="Title">Toplantı Konu</label>
                        <input type="text" class="form-control" id="Title" name="Title">
                    </div>
                    <div class="form-group">
                        <label for="Description">Toplantı Açıklama</label>
                        <input type="text" class="form-control" id="Description" name="Description">
                    </div>
                    <div class="form-group">
                        <label for="StartDate">Toplantı Tarihi</label>
                        <input type="date" class="form-control" id="StartDate" name="StartDate">
                    </div>
                    <div class="form-group">
                        <label for="Duration">Toplantı Süresi</label>
                        <input type="number" class="form-control" id="Duration" name="Duration">
                    </div>
                    <div id="EmployeesCheckboxContainer" class="form-group">
                        <!-- Satış elemanları checkboxları buraya yüklenecek -->
                    </div>
                    <button type="button" class="btn btn-primary" id="saveMeetingBtn">Kaydet</button>
                </form>
            </div>
        </div>
    </div>
</div>
